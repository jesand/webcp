// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/jesand/webcp/crawl (interfaces: CrawlQueueStorage)

package crawl

import (
	url "net/url"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of CrawlQueueStorage interface
type MockCrawlQueueStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockCrawlQueueStorageRecorder
}

// Recorder for MockCrawlQueueStorage (not exported)
type _MockCrawlQueueStorageRecorder struct {
	mock *MockCrawlQueueStorage
}

func NewMockCrawlQueueStorage(ctrl *gomock.Controller) *MockCrawlQueueStorage {
	mock := &MockCrawlQueueStorage{ctrl: ctrl}
	mock.recorder = &_MockCrawlQueueStorageRecorder{mock}
	return mock
}

func (_m *MockCrawlQueueStorage) EXPECT() *_MockCrawlQueueStorageRecorder {
	return _m.recorder
}

func (_m *MockCrawlQueueStorage) Add(_param0 *url.URL, _param1 int) {
	_m.ctrl.Call(_m, "Add", _param0, _param1)
}

func (_mr *_MockCrawlQueueStorageRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0, arg1)
}

func (_m *MockCrawlQueueStorage) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCrawlQueueStorageRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockCrawlQueueStorage) Next() (*url.URL, int) {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

func (_mr *_MockCrawlQueueStorageRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}
